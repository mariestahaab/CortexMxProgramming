/*
 * FastBitEmbedded_Implementation.c
 *
 *  Created on: Jan 21, 2024
 *      Author: mariestahaab
 */

#include "Scheduler_SysTick.h"
#include "taskStackConfig.h"

void Task1_Handler(void);
void Task2_Handler(void);
void Task3_Handler(void);
void Task4_Handler(void);

void sysTick_init(uint32_t);

// Stack Memory Calculations for Tasks and Scheduler:

#define SIZE_TASK_STACK			1024U
#define SIZE_SCHEDULER_STACK	1024U

#define SRAM_START				0x20000000U
#define SRAM_SIZE				((128)*(1024))U
#define SRAM_END				((SRAM_START) + (SRAM_SIZE))


#define T1_STACK_START			SRAM_END
#define T2_STACK_START			((SRAM_END) + (1 * SIZE_TASK_STACK))U
#define T3_STACK_START			((SRAM_END) + (2 * SIZE_TASK_STACK))U
#define T4_STACK_START			((SRAM_END) + (3 * SIZE_TASK_STACK))U

#define SCHEDULER_STACK_START	((SRAM_END) + (4 * SIZE_TASK_STACK))U

// For the SysTick Timer:
#define HSI_CLK					16000000U
#define SYST_CLK				HSI_CLK
#define TICK_Hz					1000U


int main(void)
{
    sysTick_init(TICK_Hz);

	for(;;);
}

// SysTick Timer Configuration:

void sysTick_init(uint32_t TickHz){

	uint32_t *SYST_CSR = (uint32_t *) 0xE000E010;		// SysTick Control and Status Register
	uint32_t *SYST_RVR = (uint32_t *) 0xE000E014;		// SysTick Reload Value Register

	uint32_t countValue = (SYST_CLK / TickHz) - 1;		// -1: because flag triggered on value reload => 1 extra count

	*SYST_RVR &= ~(0x00FFFFFF);							// Clear the Reload Value Register
	*SYST_RVR |= countValue;							// Load countValue into the Reload Value Register

	*SYST_CSR |= (1 << 2) | (1 << 1);					// Set CLKSOURCE (bit-2) to 1 => processor clock; and
														// set TICKINT (bit-1) to 1 => counting down to zero asserts the SysTick exception request.

	*SYST_CSR |= (1 << 0);								// Set ENABLE (bit-0) to 1 => counter enabled
}

// SysTick Handler Implementation:

void SysTick_Handler(void){
	printf("SysTick Handler \n");
}

// Task Implementation:

void Task1_Handler(void){
	while(1){
		printf("Task 1 \n");
	}
}

void Task2_Handler(void){
	while(1){
		printf("Task 2 \n");
	}
}

void Task3_Handler(void){
	while(1){
		printf("Task 3 \n");
	}
}

void Task4_Handler(void){
	while(1){
		printf("Task 4 \n");
	}
}
