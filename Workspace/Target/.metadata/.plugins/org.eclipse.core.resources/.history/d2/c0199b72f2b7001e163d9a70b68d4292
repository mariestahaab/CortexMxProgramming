/*
 * taskStackConfig.c
 *
 *  Created on: Jan 20, 2024
 *      Author: mariestahaab
 */

#include <taskStackConfig.h>

// SysTick Timer Configuration:
void SysTick_Init(uint32_t TickHz){

	uint32_t *SYST_CSR = (uint32_t *) 0xE000E010;		// SysTick Control and Status Register
	uint32_t *SYST_RVR = (uint32_t *) 0xE000E014;		// SysTick Reload Value Register

	uint32_t countValue = (SYST_CLK / TickHz) - 1;		// -1: because flag triggered on value reload => 1 extra count

	*SYST_RVR &= ~(0x00FFFFFF);							// Clear the Reload Value Register
	*SYST_RVR |= countValue;							// Load countValue into the Reload Value Register

	*SYST_CSR |= (1 << 2) | (1 << 1);					// Set CLKSOURCE (bit-2) to 1 => processor clock; and
														// set TICKINT (bit-1) to 1 => counting down to zero asserts the SysTick exception request.

	*SYST_CSR |= (1 << 0);								// Set ENABLE (bit-0) to 1 => counter enabled
}

// Initialization of Scheduler Stack:
__attribute__((naked)) void SchedulerStack_Init(uint32_t topOfStack){

	__asm volatile ("MSR MSP, %0" : : "r"(topOfStack));					// Move value stored in topOfStack to MSP.
	__asm volatile ("BX LR");											// Return to main().
}

uint32_t PspOfTasks[MAX_TASKS]		= {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t TaskHandlerAddr[MAX_TASKS]	= {(uint32_t)Task1_Handler, (uint32_t)Task2_Handler, (uint32_t)Task3_Handler, (uint32_t)Task4_Handler};

// Store Dummy Values in Stack Memory for Each Task:
void TaskStack_Init(void){

	uint32_t *pPSP;

	for(uint32_t i = 0; i < MAX_TASKS; i++){
		pPSP = (uint32_t*) PspOfTasks[i];

		pPSP--;															// xPSR Register:
		*pPSP = 0x01000000;												// T-bit = 1.

		pPSP--;															// PC:
		*pPSP = TaskHandlerAddr[i];										// Address of Task Handler.

		pPSP--;															// LR:
		*pPSP = 0xFFFFFFFD;												// EXC_RETURN.

		for(uint32_t j = 0; j < MAX_TASKS; j++){						// Write 0 in rest of the registers.
			pPSP--;
			*pPSP = 0;
		}

		PspOfTasks[i] = (uint32_t)pPSP;
	}
}


