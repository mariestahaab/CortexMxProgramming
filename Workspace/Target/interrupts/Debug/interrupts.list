
interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000dfc  08000dfc  00010dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e24  08000e24  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08000e24  08000e24  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e24  08000e24  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e24  08000e24  00010e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e28  08000e28  00010e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08000e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000016c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 14 .debug_info   000009db  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000356  00000000  00000000  00020ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000130  00000000  00000000  00020e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d0  00000000  00000000  00020f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c95  00000000  00000000  00021008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000138c  00000000  00000000  00023c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009810  00000000  00000000  00025029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a30  00000000  00000000  0002e83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0002f26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000de4 	.word	0x08000de4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08000de4 	.word	0x08000de4

080001c8 <config_IRQ_priority>:
// From Cortex-M4 Generic User Guide:
volatile uint32_t *pIPR_BASE = (uint32_t *) 0xE000E400;
volatile uint32_t *pISPR_BASE = (uint32_t *) 0XE000E200;
volatile uint32_t *pISER_BASE = (uint32_t *) 0xE000E100;

void config_IRQ_priority(uint8_t IRQ_NO, uint8_t priorityValue){
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]

	// Step 1.1: Determine which IPR to use for a given ISR Number:

	uint8_t		IPRx	= IRQ_NO / 4;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	089b      	lsrs	r3, r3, #2
 80001dc:	75fb      	strb	r3, [r7, #23]
	uint32_t	*pIPRx	= (uint32_t *) pIPR_BASE + IPRx;
 80001de:	4b12      	ldr	r3, [pc, #72]	; (8000228 <config_IRQ_priority+0x60>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	7dfb      	ldrb	r3, [r7, #23]
 80001e4:	009b      	lsls	r3, r3, #2
 80001e6:	4413      	add	r3, r2
 80001e8:	613b      	str	r3, [r7, #16]

	// Step 1.2: Determine bit position in IPRx:

	uint8_t POS_IPRx = (IRQ_NO % 4) * 8;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 0303 	and.w	r3, r3, #3
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	00db      	lsls	r3, r3, #3
 80001f4:	73fb      	strb	r3, [r7, #15]

	// Step 1.3: Configure priority in IPRx:

	*pIPRx &= ~(0xFF << POS_IPRx);			// Clear the 8-bits in the IPR.
 80001f6:	693b      	ldr	r3, [r7, #16]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	7bfa      	ldrb	r2, [r7, #15]
 80001fc:	21ff      	movs	r1, #255	; 0xff
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	43d2      	mvns	r2, r2
 8000204:	401a      	ands	r2, r3
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	601a      	str	r2, [r3, #0]
	*pIPRx |= (priorityValue << POS_IPRx);	// Set the 8-bits in the IPR.
 800020a:	693b      	ldr	r3, [r7, #16]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	79b9      	ldrb	r1, [r7, #6]
 8000210:	7bfa      	ldrb	r2, [r7, #15]
 8000212:	fa01 f202 	lsl.w	r2, r1, r2
 8000216:	431a      	orrs	r2, r3
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	601a      	str	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	371c      	adds	r7, #28
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	20000000 	.word	0x20000000

0800022c <main>:

int main(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0

	// Step 1: Configure priority for the IRQs:

	config_IRQ_priority(TIM2_IRQ_NO, 0x80);
 8000230:	2180      	movs	r1, #128	; 0x80
 8000232:	201c      	movs	r0, #28
 8000234:	f7ff ffc8 	bl	80001c8 <config_IRQ_priority>
	config_IRQ_priority(I2C1_IRQ_NO, 0x70);
 8000238:	2170      	movs	r1, #112	; 0x70
 800023a:	201f      	movs	r0, #31
 800023c:	f7ff ffc4 	bl	80001c8 <config_IRQ_priority>

	// Step 2: Set the Interrupt Pending Bit using the ISPR:

	*pISPR_BASE |= (1 << TIM2_IRQ_NO);
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <main+0x4c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <main+0x4c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800024e:	601a      	str	r2, [r3, #0]

	// Step 3: Enable IRQ using the NVIC ISER:

	*pISER_BASE |= (1 << I2C1_IRQ_NO);
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <main+0x50>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <main+0x50>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800025e:	601a      	str	r2, [r3, #0]
	*pISER_BASE |= (1 << TIM2_IRQ_NO);
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <main+0x50>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <main+0x50>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	2300      	movs	r3, #0

}
 8000272:	4618      	mov	r0, r3
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000008 	.word	0x20000008

08000280 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	printf ("[I2C IRQ Handler] \n");
 8000284:	4802      	ldr	r0, [pc, #8]	; (8000290 <I2C1_EV_IRQHandler+0x10>)
 8000286:	f000 fa1d 	bl	80006c4 <puts>
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	08000dfc 	.word	0x08000dfc

08000294 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

	printf ("[TIM2 IRQ Handler] \n");
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <TIM2_IRQHandler+0x1c>)
 800029a:	f000 fa13 	bl	80006c4 <puts>

	*pISPR_BASE |= (1 << I2C1_IRQ_NO);	// Nested Interrupt, will work if priority value of nested IRQ is Lower.
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <TIM2_IRQHandler+0x20>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b03      	ldr	r3, [pc, #12]	; (80002b4 <TIM2_IRQHandler+0x20>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80002ac:	601a      	str	r2, [r3, #0]

	while(1);
 80002ae:	e7fe      	b.n	80002ae <TIM2_IRQHandler+0x1a>
 80002b0:	08000e10 	.word	0x08000e10
 80002b4:	20000004 	.word	0x20000004

080002b8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <ITM_SendChar+0x44>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <ITM_SendChar+0x44>)
 80002c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002cc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <ITM_SendChar+0x48>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <ITM_SendChar+0x48>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002da:	bf00      	nop
 80002dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f8      	beq.n	80002dc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	6013      	str	r3, [r2, #0]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	e000edfc 	.word	0xe000edfc
 8000300:	e0000e00 	.word	0xe0000e00

08000304 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
 8000314:	e00a      	b.n	800032c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000316:	f3af 8000 	nop.w
 800031a:	4601      	mov	r1, r0
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	1c5a      	adds	r2, r3, #1
 8000320:	60ba      	str	r2, [r7, #8]
 8000322:	b2ca      	uxtb	r2, r1
 8000324:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	3301      	adds	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	697a      	ldr	r2, [r7, #20]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	429a      	cmp	r2, r3
 8000332:	dbf0      	blt.n	8000316 <_read+0x12>
  }

  return len;
 8000334:	687b      	ldr	r3, [r7, #4]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	b086      	sub	sp, #24
 8000342:	af00      	add	r7, sp, #0
 8000344:	60f8      	str	r0, [r7, #12]
 8000346:	60b9      	str	r1, [r7, #8]
 8000348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]
 800034e:	e009      	b.n	8000364 <_write+0x26>
  {
    //__io_putchar(*ptr++);

	  ITM_SendChar(*ptr++);
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	1c5a      	adds	r2, r3, #1
 8000354:	60ba      	str	r2, [r7, #8]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ffad 	bl	80002b8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	3301      	adds	r3, #1
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	697a      	ldr	r2, [r7, #20]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	429a      	cmp	r2, r3
 800036a:	dbf1      	blt.n	8000350 <_write+0x12>
  }
  return len;
 800036c:	687b      	ldr	r3, [r7, #4]
}
 800036e:	4618      	mov	r0, r3
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <_close>:

int _close(int file)
{
 8000376:	b480      	push	{r7}
 8000378:	b083      	sub	sp, #12
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800037e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800039c:	605a      	str	r2, [r3, #4]
  return 0;
 800039e:	2300      	movs	r3, #0
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <_isatty>:

int _isatty(int file)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003b2:	2301      	movs	r3, #1
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr

080003be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003be:	b480      	push	{r7}
 80003c0:	b085      	sub	sp, #20
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3714      	adds	r7, #20
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
	...

080003d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003e0:	4a14      	ldr	r2, [pc, #80]	; (8000434 <_sbrk+0x5c>)
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <_sbrk+0x60>)
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <_sbrk+0x64>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d102      	bne.n	80003fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <_sbrk+0x64>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	; (8000440 <_sbrk+0x68>)
 80003f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <_sbrk+0x64>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	693a      	ldr	r2, [r7, #16]
 8000404:	429a      	cmp	r2, r3
 8000406:	d207      	bcs.n	8000418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000408:	f000 f96c 	bl	80006e4 <__errno>
 800040c:	4603      	mov	r3, r0
 800040e:	220c      	movs	r2, #12
 8000410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000416:	e009      	b.n	800042c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <_sbrk+0x64>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	4a05      	ldr	r2, [pc, #20]	; (800043c <_sbrk+0x64>)
 8000428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800042a:	68fb      	ldr	r3, [r7, #12]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20020000 	.word	0x20020000
 8000438:	00000400 	.word	0x00000400
 800043c:	20000084 	.word	0x20000084
 8000440:	200001d8 	.word	0x200001d8

08000444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000448:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	; (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	; (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000472:	f000 f93d 	bl	80006f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff fed9 	bl	800022c <main>

0800047a <LoopForever>:

LoopForever:
  b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   r0, =_estack
 800047c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000488:	08000e2c 	.word	0x08000e2c
  ldr r2, =_sbss
 800048c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000490:	200001d4 	.word	0x200001d4

08000494 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC_IRQHandler>
	...

08000498 <std>:
 8000498:	2300      	movs	r3, #0
 800049a:	b510      	push	{r4, lr}
 800049c:	4604      	mov	r4, r0
 800049e:	e9c0 3300 	strd	r3, r3, [r0]
 80004a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004a6:	6083      	str	r3, [r0, #8]
 80004a8:	8181      	strh	r1, [r0, #12]
 80004aa:	6643      	str	r3, [r0, #100]	; 0x64
 80004ac:	81c2      	strh	r2, [r0, #14]
 80004ae:	6183      	str	r3, [r0, #24]
 80004b0:	4619      	mov	r1, r3
 80004b2:	2208      	movs	r2, #8
 80004b4:	305c      	adds	r0, #92	; 0x5c
 80004b6:	f000 f90d 	bl	80006d4 <memset>
 80004ba:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <std+0x58>)
 80004bc:	6263      	str	r3, [r4, #36]	; 0x24
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <std+0x5c>)
 80004c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <std+0x60>)
 80004c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004c6:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <std+0x64>)
 80004c8:	6323      	str	r3, [r4, #48]	; 0x30
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <std+0x68>)
 80004cc:	6224      	str	r4, [r4, #32]
 80004ce:	429c      	cmp	r4, r3
 80004d0:	d006      	beq.n	80004e0 <std+0x48>
 80004d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80004d6:	4294      	cmp	r4, r2
 80004d8:	d002      	beq.n	80004e0 <std+0x48>
 80004da:	33d0      	adds	r3, #208	; 0xd0
 80004dc:	429c      	cmp	r4, r3
 80004de:	d105      	bne.n	80004ec <std+0x54>
 80004e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80004e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004e8:	f000 b926 	b.w	8000738 <__retarget_lock_init_recursive>
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	bf00      	nop
 80004f0:	080009ed 	.word	0x080009ed
 80004f4:	08000a0f 	.word	0x08000a0f
 80004f8:	08000a47 	.word	0x08000a47
 80004fc:	08000a6b 	.word	0x08000a6b
 8000500:	20000088 	.word	0x20000088

08000504 <stdio_exit_handler>:
 8000504:	4a02      	ldr	r2, [pc, #8]	; (8000510 <stdio_exit_handler+0xc>)
 8000506:	4903      	ldr	r1, [pc, #12]	; (8000514 <stdio_exit_handler+0x10>)
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <stdio_exit_handler+0x14>)
 800050a:	f000 b869 	b.w	80005e0 <_fwalk_sglue>
 800050e:	bf00      	nop
 8000510:	2000000c 	.word	0x2000000c
 8000514:	08000985 	.word	0x08000985
 8000518:	20000018 	.word	0x20000018

0800051c <cleanup_stdio>:
 800051c:	6841      	ldr	r1, [r0, #4]
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <cleanup_stdio+0x34>)
 8000520:	4299      	cmp	r1, r3
 8000522:	b510      	push	{r4, lr}
 8000524:	4604      	mov	r4, r0
 8000526:	d001      	beq.n	800052c <cleanup_stdio+0x10>
 8000528:	f000 fa2c 	bl	8000984 <_fflush_r>
 800052c:	68a1      	ldr	r1, [r4, #8]
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <cleanup_stdio+0x38>)
 8000530:	4299      	cmp	r1, r3
 8000532:	d002      	beq.n	800053a <cleanup_stdio+0x1e>
 8000534:	4620      	mov	r0, r4
 8000536:	f000 fa25 	bl	8000984 <_fflush_r>
 800053a:	68e1      	ldr	r1, [r4, #12]
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <cleanup_stdio+0x3c>)
 800053e:	4299      	cmp	r1, r3
 8000540:	d004      	beq.n	800054c <cleanup_stdio+0x30>
 8000542:	4620      	mov	r0, r4
 8000544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000548:	f000 ba1c 	b.w	8000984 <_fflush_r>
 800054c:	bd10      	pop	{r4, pc}
 800054e:	bf00      	nop
 8000550:	20000088 	.word	0x20000088
 8000554:	200000f0 	.word	0x200000f0
 8000558:	20000158 	.word	0x20000158

0800055c <global_stdio_init.part.0>:
 800055c:	b510      	push	{r4, lr}
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <global_stdio_init.part.0+0x30>)
 8000560:	4c0b      	ldr	r4, [pc, #44]	; (8000590 <global_stdio_init.part.0+0x34>)
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <global_stdio_init.part.0+0x38>)
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	4620      	mov	r0, r4
 8000568:	2200      	movs	r2, #0
 800056a:	2104      	movs	r1, #4
 800056c:	f7ff ff94 	bl	8000498 <std>
 8000570:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000574:	2201      	movs	r2, #1
 8000576:	2109      	movs	r1, #9
 8000578:	f7ff ff8e 	bl	8000498 <std>
 800057c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000580:	2202      	movs	r2, #2
 8000582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000586:	2112      	movs	r1, #18
 8000588:	f7ff bf86 	b.w	8000498 <std>
 800058c:	200001c0 	.word	0x200001c0
 8000590:	20000088 	.word	0x20000088
 8000594:	08000505 	.word	0x08000505

08000598 <__sfp_lock_acquire>:
 8000598:	4801      	ldr	r0, [pc, #4]	; (80005a0 <__sfp_lock_acquire+0x8>)
 800059a:	f000 b8ce 	b.w	800073a <__retarget_lock_acquire_recursive>
 800059e:	bf00      	nop
 80005a0:	200001c5 	.word	0x200001c5

080005a4 <__sfp_lock_release>:
 80005a4:	4801      	ldr	r0, [pc, #4]	; (80005ac <__sfp_lock_release+0x8>)
 80005a6:	f000 b8c9 	b.w	800073c <__retarget_lock_release_recursive>
 80005aa:	bf00      	nop
 80005ac:	200001c5 	.word	0x200001c5

080005b0 <__sinit>:
 80005b0:	b510      	push	{r4, lr}
 80005b2:	4604      	mov	r4, r0
 80005b4:	f7ff fff0 	bl	8000598 <__sfp_lock_acquire>
 80005b8:	6a23      	ldr	r3, [r4, #32]
 80005ba:	b11b      	cbz	r3, 80005c4 <__sinit+0x14>
 80005bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005c0:	f7ff bff0 	b.w	80005a4 <__sfp_lock_release>
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <__sinit+0x28>)
 80005c6:	6223      	str	r3, [r4, #32]
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <__sinit+0x2c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1f5      	bne.n	80005bc <__sinit+0xc>
 80005d0:	f7ff ffc4 	bl	800055c <global_stdio_init.part.0>
 80005d4:	e7f2      	b.n	80005bc <__sinit+0xc>
 80005d6:	bf00      	nop
 80005d8:	0800051d 	.word	0x0800051d
 80005dc:	200001c0 	.word	0x200001c0

080005e0 <_fwalk_sglue>:
 80005e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005e4:	4607      	mov	r7, r0
 80005e6:	4688      	mov	r8, r1
 80005e8:	4614      	mov	r4, r2
 80005ea:	2600      	movs	r6, #0
 80005ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005f0:	f1b9 0901 	subs.w	r9, r9, #1
 80005f4:	d505      	bpl.n	8000602 <_fwalk_sglue+0x22>
 80005f6:	6824      	ldr	r4, [r4, #0]
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d1f7      	bne.n	80005ec <_fwalk_sglue+0xc>
 80005fc:	4630      	mov	r0, r6
 80005fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000602:	89ab      	ldrh	r3, [r5, #12]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d907      	bls.n	8000618 <_fwalk_sglue+0x38>
 8000608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800060c:	3301      	adds	r3, #1
 800060e:	d003      	beq.n	8000618 <_fwalk_sglue+0x38>
 8000610:	4629      	mov	r1, r5
 8000612:	4638      	mov	r0, r7
 8000614:	47c0      	blx	r8
 8000616:	4306      	orrs	r6, r0
 8000618:	3568      	adds	r5, #104	; 0x68
 800061a:	e7e9      	b.n	80005f0 <_fwalk_sglue+0x10>

0800061c <_puts_r>:
 800061c:	6a03      	ldr	r3, [r0, #32]
 800061e:	b570      	push	{r4, r5, r6, lr}
 8000620:	6884      	ldr	r4, [r0, #8]
 8000622:	4605      	mov	r5, r0
 8000624:	460e      	mov	r6, r1
 8000626:	b90b      	cbnz	r3, 800062c <_puts_r+0x10>
 8000628:	f7ff ffc2 	bl	80005b0 <__sinit>
 800062c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800062e:	07db      	lsls	r3, r3, #31
 8000630:	d405      	bmi.n	800063e <_puts_r+0x22>
 8000632:	89a3      	ldrh	r3, [r4, #12]
 8000634:	0598      	lsls	r0, r3, #22
 8000636:	d402      	bmi.n	800063e <_puts_r+0x22>
 8000638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800063a:	f000 f87e 	bl	800073a <__retarget_lock_acquire_recursive>
 800063e:	89a3      	ldrh	r3, [r4, #12]
 8000640:	0719      	lsls	r1, r3, #28
 8000642:	d513      	bpl.n	800066c <_puts_r+0x50>
 8000644:	6923      	ldr	r3, [r4, #16]
 8000646:	b18b      	cbz	r3, 800066c <_puts_r+0x50>
 8000648:	3e01      	subs	r6, #1
 800064a:	68a3      	ldr	r3, [r4, #8]
 800064c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000650:	3b01      	subs	r3, #1
 8000652:	60a3      	str	r3, [r4, #8]
 8000654:	b9e9      	cbnz	r1, 8000692 <_puts_r+0x76>
 8000656:	2b00      	cmp	r3, #0
 8000658:	da2e      	bge.n	80006b8 <_puts_r+0x9c>
 800065a:	4622      	mov	r2, r4
 800065c:	210a      	movs	r1, #10
 800065e:	4628      	mov	r0, r5
 8000660:	f000 fa07 	bl	8000a72 <__swbuf_r>
 8000664:	3001      	adds	r0, #1
 8000666:	d007      	beq.n	8000678 <_puts_r+0x5c>
 8000668:	250a      	movs	r5, #10
 800066a:	e007      	b.n	800067c <_puts_r+0x60>
 800066c:	4621      	mov	r1, r4
 800066e:	4628      	mov	r0, r5
 8000670:	f000 fa3c 	bl	8000aec <__swsetup_r>
 8000674:	2800      	cmp	r0, #0
 8000676:	d0e7      	beq.n	8000648 <_puts_r+0x2c>
 8000678:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800067c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800067e:	07da      	lsls	r2, r3, #31
 8000680:	d405      	bmi.n	800068e <_puts_r+0x72>
 8000682:	89a3      	ldrh	r3, [r4, #12]
 8000684:	059b      	lsls	r3, r3, #22
 8000686:	d402      	bmi.n	800068e <_puts_r+0x72>
 8000688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800068a:	f000 f857 	bl	800073c <__retarget_lock_release_recursive>
 800068e:	4628      	mov	r0, r5
 8000690:	bd70      	pop	{r4, r5, r6, pc}
 8000692:	2b00      	cmp	r3, #0
 8000694:	da04      	bge.n	80006a0 <_puts_r+0x84>
 8000696:	69a2      	ldr	r2, [r4, #24]
 8000698:	429a      	cmp	r2, r3
 800069a:	dc06      	bgt.n	80006aa <_puts_r+0x8e>
 800069c:	290a      	cmp	r1, #10
 800069e:	d004      	beq.n	80006aa <_puts_r+0x8e>
 80006a0:	6823      	ldr	r3, [r4, #0]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	6022      	str	r2, [r4, #0]
 80006a6:	7019      	strb	r1, [r3, #0]
 80006a8:	e7cf      	b.n	800064a <_puts_r+0x2e>
 80006aa:	4622      	mov	r2, r4
 80006ac:	4628      	mov	r0, r5
 80006ae:	f000 f9e0 	bl	8000a72 <__swbuf_r>
 80006b2:	3001      	adds	r0, #1
 80006b4:	d1c9      	bne.n	800064a <_puts_r+0x2e>
 80006b6:	e7df      	b.n	8000678 <_puts_r+0x5c>
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	250a      	movs	r5, #10
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	6022      	str	r2, [r4, #0]
 80006c0:	701d      	strb	r5, [r3, #0]
 80006c2:	e7db      	b.n	800067c <_puts_r+0x60>

080006c4 <puts>:
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <puts+0xc>)
 80006c6:	4601      	mov	r1, r0
 80006c8:	6818      	ldr	r0, [r3, #0]
 80006ca:	f7ff bfa7 	b.w	800061c <_puts_r>
 80006ce:	bf00      	nop
 80006d0:	20000064 	.word	0x20000064

080006d4 <memset>:
 80006d4:	4402      	add	r2, r0
 80006d6:	4603      	mov	r3, r0
 80006d8:	4293      	cmp	r3, r2
 80006da:	d100      	bne.n	80006de <memset+0xa>
 80006dc:	4770      	bx	lr
 80006de:	f803 1b01 	strb.w	r1, [r3], #1
 80006e2:	e7f9      	b.n	80006d8 <memset+0x4>

080006e4 <__errno>:
 80006e4:	4b01      	ldr	r3, [pc, #4]	; (80006ec <__errno+0x8>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000064 	.word	0x20000064

080006f0 <__libc_init_array>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	4d0d      	ldr	r5, [pc, #52]	; (8000728 <__libc_init_array+0x38>)
 80006f4:	4c0d      	ldr	r4, [pc, #52]	; (800072c <__libc_init_array+0x3c>)
 80006f6:	1b64      	subs	r4, r4, r5
 80006f8:	10a4      	asrs	r4, r4, #2
 80006fa:	2600      	movs	r6, #0
 80006fc:	42a6      	cmp	r6, r4
 80006fe:	d109      	bne.n	8000714 <__libc_init_array+0x24>
 8000700:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <__libc_init_array+0x40>)
 8000702:	4c0c      	ldr	r4, [pc, #48]	; (8000734 <__libc_init_array+0x44>)
 8000704:	f000 fb6e 	bl	8000de4 <_init>
 8000708:	1b64      	subs	r4, r4, r5
 800070a:	10a4      	asrs	r4, r4, #2
 800070c:	2600      	movs	r6, #0
 800070e:	42a6      	cmp	r6, r4
 8000710:	d105      	bne.n	800071e <__libc_init_array+0x2e>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f855 3b04 	ldr.w	r3, [r5], #4
 8000718:	4798      	blx	r3
 800071a:	3601      	adds	r6, #1
 800071c:	e7ee      	b.n	80006fc <__libc_init_array+0xc>
 800071e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000722:	4798      	blx	r3
 8000724:	3601      	adds	r6, #1
 8000726:	e7f2      	b.n	800070e <__libc_init_array+0x1e>
 8000728:	08000e24 	.word	0x08000e24
 800072c:	08000e24 	.word	0x08000e24
 8000730:	08000e24 	.word	0x08000e24
 8000734:	08000e28 	.word	0x08000e28

08000738 <__retarget_lock_init_recursive>:
 8000738:	4770      	bx	lr

0800073a <__retarget_lock_acquire_recursive>:
 800073a:	4770      	bx	lr

0800073c <__retarget_lock_release_recursive>:
 800073c:	4770      	bx	lr
	...

08000740 <sbrk_aligned>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	4e0e      	ldr	r6, [pc, #56]	; (800077c <sbrk_aligned+0x3c>)
 8000744:	460c      	mov	r4, r1
 8000746:	6831      	ldr	r1, [r6, #0]
 8000748:	4605      	mov	r5, r0
 800074a:	b911      	cbnz	r1, 8000752 <sbrk_aligned+0x12>
 800074c:	f000 fade 	bl	8000d0c <_sbrk_r>
 8000750:	6030      	str	r0, [r6, #0]
 8000752:	4621      	mov	r1, r4
 8000754:	4628      	mov	r0, r5
 8000756:	f000 fad9 	bl	8000d0c <_sbrk_r>
 800075a:	1c43      	adds	r3, r0, #1
 800075c:	d00a      	beq.n	8000774 <sbrk_aligned+0x34>
 800075e:	1cc4      	adds	r4, r0, #3
 8000760:	f024 0403 	bic.w	r4, r4, #3
 8000764:	42a0      	cmp	r0, r4
 8000766:	d007      	beq.n	8000778 <sbrk_aligned+0x38>
 8000768:	1a21      	subs	r1, r4, r0
 800076a:	4628      	mov	r0, r5
 800076c:	f000 face 	bl	8000d0c <_sbrk_r>
 8000770:	3001      	adds	r0, #1
 8000772:	d101      	bne.n	8000778 <sbrk_aligned+0x38>
 8000774:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000778:	4620      	mov	r0, r4
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	200001cc 	.word	0x200001cc

08000780 <_malloc_r>:
 8000780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000784:	1ccd      	adds	r5, r1, #3
 8000786:	f025 0503 	bic.w	r5, r5, #3
 800078a:	3508      	adds	r5, #8
 800078c:	2d0c      	cmp	r5, #12
 800078e:	bf38      	it	cc
 8000790:	250c      	movcc	r5, #12
 8000792:	2d00      	cmp	r5, #0
 8000794:	4607      	mov	r7, r0
 8000796:	db01      	blt.n	800079c <_malloc_r+0x1c>
 8000798:	42a9      	cmp	r1, r5
 800079a:	d905      	bls.n	80007a8 <_malloc_r+0x28>
 800079c:	230c      	movs	r3, #12
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	2600      	movs	r6, #0
 80007a2:	4630      	mov	r0, r6
 80007a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800087c <_malloc_r+0xfc>
 80007ac:	f000 f912 	bl	80009d4 <__malloc_lock>
 80007b0:	f8d8 3000 	ldr.w	r3, [r8]
 80007b4:	461c      	mov	r4, r3
 80007b6:	bb5c      	cbnz	r4, 8000810 <_malloc_r+0x90>
 80007b8:	4629      	mov	r1, r5
 80007ba:	4638      	mov	r0, r7
 80007bc:	f7ff ffc0 	bl	8000740 <sbrk_aligned>
 80007c0:	1c43      	adds	r3, r0, #1
 80007c2:	4604      	mov	r4, r0
 80007c4:	d155      	bne.n	8000872 <_malloc_r+0xf2>
 80007c6:	f8d8 4000 	ldr.w	r4, [r8]
 80007ca:	4626      	mov	r6, r4
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d145      	bne.n	800085c <_malloc_r+0xdc>
 80007d0:	2c00      	cmp	r4, #0
 80007d2:	d048      	beq.n	8000866 <_malloc_r+0xe6>
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	4631      	mov	r1, r6
 80007d8:	4638      	mov	r0, r7
 80007da:	eb04 0903 	add.w	r9, r4, r3
 80007de:	f000 fa95 	bl	8000d0c <_sbrk_r>
 80007e2:	4581      	cmp	r9, r0
 80007e4:	d13f      	bne.n	8000866 <_malloc_r+0xe6>
 80007e6:	6821      	ldr	r1, [r4, #0]
 80007e8:	1a6d      	subs	r5, r5, r1
 80007ea:	4629      	mov	r1, r5
 80007ec:	4638      	mov	r0, r7
 80007ee:	f7ff ffa7 	bl	8000740 <sbrk_aligned>
 80007f2:	3001      	adds	r0, #1
 80007f4:	d037      	beq.n	8000866 <_malloc_r+0xe6>
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	442b      	add	r3, r5
 80007fa:	6023      	str	r3, [r4, #0]
 80007fc:	f8d8 3000 	ldr.w	r3, [r8]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d038      	beq.n	8000876 <_malloc_r+0xf6>
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	42a2      	cmp	r2, r4
 8000808:	d12b      	bne.n	8000862 <_malloc_r+0xe2>
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	e00f      	b.n	8000830 <_malloc_r+0xb0>
 8000810:	6822      	ldr	r2, [r4, #0]
 8000812:	1b52      	subs	r2, r2, r5
 8000814:	d41f      	bmi.n	8000856 <_malloc_r+0xd6>
 8000816:	2a0b      	cmp	r2, #11
 8000818:	d917      	bls.n	800084a <_malloc_r+0xca>
 800081a:	1961      	adds	r1, r4, r5
 800081c:	42a3      	cmp	r3, r4
 800081e:	6025      	str	r5, [r4, #0]
 8000820:	bf18      	it	ne
 8000822:	6059      	strne	r1, [r3, #4]
 8000824:	6863      	ldr	r3, [r4, #4]
 8000826:	bf08      	it	eq
 8000828:	f8c8 1000 	streq.w	r1, [r8]
 800082c:	5162      	str	r2, [r4, r5]
 800082e:	604b      	str	r3, [r1, #4]
 8000830:	4638      	mov	r0, r7
 8000832:	f104 060b 	add.w	r6, r4, #11
 8000836:	f000 f8d3 	bl	80009e0 <__malloc_unlock>
 800083a:	f026 0607 	bic.w	r6, r6, #7
 800083e:	1d23      	adds	r3, r4, #4
 8000840:	1af2      	subs	r2, r6, r3
 8000842:	d0ae      	beq.n	80007a2 <_malloc_r+0x22>
 8000844:	1b9b      	subs	r3, r3, r6
 8000846:	50a3      	str	r3, [r4, r2]
 8000848:	e7ab      	b.n	80007a2 <_malloc_r+0x22>
 800084a:	42a3      	cmp	r3, r4
 800084c:	6862      	ldr	r2, [r4, #4]
 800084e:	d1dd      	bne.n	800080c <_malloc_r+0x8c>
 8000850:	f8c8 2000 	str.w	r2, [r8]
 8000854:	e7ec      	b.n	8000830 <_malloc_r+0xb0>
 8000856:	4623      	mov	r3, r4
 8000858:	6864      	ldr	r4, [r4, #4]
 800085a:	e7ac      	b.n	80007b6 <_malloc_r+0x36>
 800085c:	4634      	mov	r4, r6
 800085e:	6876      	ldr	r6, [r6, #4]
 8000860:	e7b4      	b.n	80007cc <_malloc_r+0x4c>
 8000862:	4613      	mov	r3, r2
 8000864:	e7cc      	b.n	8000800 <_malloc_r+0x80>
 8000866:	230c      	movs	r3, #12
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4638      	mov	r0, r7
 800086c:	f000 f8b8 	bl	80009e0 <__malloc_unlock>
 8000870:	e797      	b.n	80007a2 <_malloc_r+0x22>
 8000872:	6025      	str	r5, [r4, #0]
 8000874:	e7dc      	b.n	8000830 <_malloc_r+0xb0>
 8000876:	605b      	str	r3, [r3, #4]
 8000878:	deff      	udf	#255	; 0xff
 800087a:	bf00      	nop
 800087c:	200001c8 	.word	0x200001c8

08000880 <__sflush_r>:
 8000880:	898a      	ldrh	r2, [r1, #12]
 8000882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000884:	4605      	mov	r5, r0
 8000886:	0710      	lsls	r0, r2, #28
 8000888:	460c      	mov	r4, r1
 800088a:	d457      	bmi.n	800093c <__sflush_r+0xbc>
 800088c:	684b      	ldr	r3, [r1, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	dc04      	bgt.n	800089c <__sflush_r+0x1c>
 8000892:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000894:	2b00      	cmp	r3, #0
 8000896:	dc01      	bgt.n	800089c <__sflush_r+0x1c>
 8000898:	2000      	movs	r0, #0
 800089a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800089c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d0fa      	beq.n	8000898 <__sflush_r+0x18>
 80008a2:	2300      	movs	r3, #0
 80008a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80008a8:	682f      	ldr	r7, [r5, #0]
 80008aa:	6a21      	ldr	r1, [r4, #32]
 80008ac:	602b      	str	r3, [r5, #0]
 80008ae:	d032      	beq.n	8000916 <__sflush_r+0x96>
 80008b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	075a      	lsls	r2, r3, #29
 80008b6:	d505      	bpl.n	80008c4 <__sflush_r+0x44>
 80008b8:	6863      	ldr	r3, [r4, #4]
 80008ba:	1ac0      	subs	r0, r0, r3
 80008bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008be:	b10b      	cbz	r3, 80008c4 <__sflush_r+0x44>
 80008c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008c2:	1ac0      	subs	r0, r0, r3
 80008c4:	2300      	movs	r3, #0
 80008c6:	4602      	mov	r2, r0
 80008c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008ca:	6a21      	ldr	r1, [r4, #32]
 80008cc:	4628      	mov	r0, r5
 80008ce:	47b0      	blx	r6
 80008d0:	1c43      	adds	r3, r0, #1
 80008d2:	89a3      	ldrh	r3, [r4, #12]
 80008d4:	d106      	bne.n	80008e4 <__sflush_r+0x64>
 80008d6:	6829      	ldr	r1, [r5, #0]
 80008d8:	291d      	cmp	r1, #29
 80008da:	d82b      	bhi.n	8000934 <__sflush_r+0xb4>
 80008dc:	4a28      	ldr	r2, [pc, #160]	; (8000980 <__sflush_r+0x100>)
 80008de:	410a      	asrs	r2, r1
 80008e0:	07d6      	lsls	r6, r2, #31
 80008e2:	d427      	bmi.n	8000934 <__sflush_r+0xb4>
 80008e4:	2200      	movs	r2, #0
 80008e6:	6062      	str	r2, [r4, #4]
 80008e8:	04d9      	lsls	r1, r3, #19
 80008ea:	6922      	ldr	r2, [r4, #16]
 80008ec:	6022      	str	r2, [r4, #0]
 80008ee:	d504      	bpl.n	80008fa <__sflush_r+0x7a>
 80008f0:	1c42      	adds	r2, r0, #1
 80008f2:	d101      	bne.n	80008f8 <__sflush_r+0x78>
 80008f4:	682b      	ldr	r3, [r5, #0]
 80008f6:	b903      	cbnz	r3, 80008fa <__sflush_r+0x7a>
 80008f8:	6560      	str	r0, [r4, #84]	; 0x54
 80008fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008fc:	602f      	str	r7, [r5, #0]
 80008fe:	2900      	cmp	r1, #0
 8000900:	d0ca      	beq.n	8000898 <__sflush_r+0x18>
 8000902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000906:	4299      	cmp	r1, r3
 8000908:	d002      	beq.n	8000910 <__sflush_r+0x90>
 800090a:	4628      	mov	r0, r5
 800090c:	f000 fa20 	bl	8000d50 <_free_r>
 8000910:	2000      	movs	r0, #0
 8000912:	6360      	str	r0, [r4, #52]	; 0x34
 8000914:	e7c1      	b.n	800089a <__sflush_r+0x1a>
 8000916:	2301      	movs	r3, #1
 8000918:	4628      	mov	r0, r5
 800091a:	47b0      	blx	r6
 800091c:	1c41      	adds	r1, r0, #1
 800091e:	d1c8      	bne.n	80008b2 <__sflush_r+0x32>
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0c5      	beq.n	80008b2 <__sflush_r+0x32>
 8000926:	2b1d      	cmp	r3, #29
 8000928:	d001      	beq.n	800092e <__sflush_r+0xae>
 800092a:	2b16      	cmp	r3, #22
 800092c:	d101      	bne.n	8000932 <__sflush_r+0xb2>
 800092e:	602f      	str	r7, [r5, #0]
 8000930:	e7b2      	b.n	8000898 <__sflush_r+0x18>
 8000932:	89a3      	ldrh	r3, [r4, #12]
 8000934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000938:	81a3      	strh	r3, [r4, #12]
 800093a:	e7ae      	b.n	800089a <__sflush_r+0x1a>
 800093c:	690f      	ldr	r7, [r1, #16]
 800093e:	2f00      	cmp	r7, #0
 8000940:	d0aa      	beq.n	8000898 <__sflush_r+0x18>
 8000942:	0793      	lsls	r3, r2, #30
 8000944:	680e      	ldr	r6, [r1, #0]
 8000946:	bf08      	it	eq
 8000948:	694b      	ldreq	r3, [r1, #20]
 800094a:	600f      	str	r7, [r1, #0]
 800094c:	bf18      	it	ne
 800094e:	2300      	movne	r3, #0
 8000950:	1bf6      	subs	r6, r6, r7
 8000952:	608b      	str	r3, [r1, #8]
 8000954:	2e00      	cmp	r6, #0
 8000956:	dd9f      	ble.n	8000898 <__sflush_r+0x18>
 8000958:	6a21      	ldr	r1, [r4, #32]
 800095a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800095e:	4633      	mov	r3, r6
 8000960:	463a      	mov	r2, r7
 8000962:	4628      	mov	r0, r5
 8000964:	47e0      	blx	ip
 8000966:	2800      	cmp	r0, #0
 8000968:	dc06      	bgt.n	8000978 <__sflush_r+0xf8>
 800096a:	89a3      	ldrh	r3, [r4, #12]
 800096c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000970:	81a3      	strh	r3, [r4, #12]
 8000972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000976:	e790      	b.n	800089a <__sflush_r+0x1a>
 8000978:	4407      	add	r7, r0
 800097a:	1a36      	subs	r6, r6, r0
 800097c:	e7ea      	b.n	8000954 <__sflush_r+0xd4>
 800097e:	bf00      	nop
 8000980:	dfbffffe 	.word	0xdfbffffe

08000984 <_fflush_r>:
 8000984:	b538      	push	{r3, r4, r5, lr}
 8000986:	690b      	ldr	r3, [r1, #16]
 8000988:	4605      	mov	r5, r0
 800098a:	460c      	mov	r4, r1
 800098c:	b913      	cbnz	r3, 8000994 <_fflush_r+0x10>
 800098e:	2500      	movs	r5, #0
 8000990:	4628      	mov	r0, r5
 8000992:	bd38      	pop	{r3, r4, r5, pc}
 8000994:	b118      	cbz	r0, 800099e <_fflush_r+0x1a>
 8000996:	6a03      	ldr	r3, [r0, #32]
 8000998:	b90b      	cbnz	r3, 800099e <_fflush_r+0x1a>
 800099a:	f7ff fe09 	bl	80005b0 <__sinit>
 800099e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f3      	beq.n	800098e <_fflush_r+0xa>
 80009a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80009a8:	07d0      	lsls	r0, r2, #31
 80009aa:	d404      	bmi.n	80009b6 <_fflush_r+0x32>
 80009ac:	0599      	lsls	r1, r3, #22
 80009ae:	d402      	bmi.n	80009b6 <_fflush_r+0x32>
 80009b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009b2:	f7ff fec2 	bl	800073a <__retarget_lock_acquire_recursive>
 80009b6:	4628      	mov	r0, r5
 80009b8:	4621      	mov	r1, r4
 80009ba:	f7ff ff61 	bl	8000880 <__sflush_r>
 80009be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009c0:	07da      	lsls	r2, r3, #31
 80009c2:	4605      	mov	r5, r0
 80009c4:	d4e4      	bmi.n	8000990 <_fflush_r+0xc>
 80009c6:	89a3      	ldrh	r3, [r4, #12]
 80009c8:	059b      	lsls	r3, r3, #22
 80009ca:	d4e1      	bmi.n	8000990 <_fflush_r+0xc>
 80009cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009ce:	f7ff feb5 	bl	800073c <__retarget_lock_release_recursive>
 80009d2:	e7dd      	b.n	8000990 <_fflush_r+0xc>

080009d4 <__malloc_lock>:
 80009d4:	4801      	ldr	r0, [pc, #4]	; (80009dc <__malloc_lock+0x8>)
 80009d6:	f7ff beb0 	b.w	800073a <__retarget_lock_acquire_recursive>
 80009da:	bf00      	nop
 80009dc:	200001c4 	.word	0x200001c4

080009e0 <__malloc_unlock>:
 80009e0:	4801      	ldr	r0, [pc, #4]	; (80009e8 <__malloc_unlock+0x8>)
 80009e2:	f7ff beab 	b.w	800073c <__retarget_lock_release_recursive>
 80009e6:	bf00      	nop
 80009e8:	200001c4 	.word	0x200001c4

080009ec <__sread>:
 80009ec:	b510      	push	{r4, lr}
 80009ee:	460c      	mov	r4, r1
 80009f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009f4:	f000 f978 	bl	8000ce8 <_read_r>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	bfab      	itete	ge
 80009fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80009fe:	89a3      	ldrhlt	r3, [r4, #12]
 8000a00:	181b      	addge	r3, r3, r0
 8000a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a06:	bfac      	ite	ge
 8000a08:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a0a:	81a3      	strhlt	r3, [r4, #12]
 8000a0c:	bd10      	pop	{r4, pc}

08000a0e <__swrite>:
 8000a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a12:	461f      	mov	r7, r3
 8000a14:	898b      	ldrh	r3, [r1, #12]
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	4605      	mov	r5, r0
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	4616      	mov	r6, r2
 8000a1e:	d505      	bpl.n	8000a2c <__swrite+0x1e>
 8000a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a24:	2302      	movs	r3, #2
 8000a26:	2200      	movs	r2, #0
 8000a28:	f000 f94c 	bl	8000cc4 <_lseek_r>
 8000a2c:	89a3      	ldrh	r3, [r4, #12]
 8000a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a36:	81a3      	strh	r3, [r4, #12]
 8000a38:	4632      	mov	r2, r6
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a42:	f000 b973 	b.w	8000d2c <_write_r>

08000a46 <__sseek>:
 8000a46:	b510      	push	{r4, lr}
 8000a48:	460c      	mov	r4, r1
 8000a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a4e:	f000 f939 	bl	8000cc4 <_lseek_r>
 8000a52:	1c43      	adds	r3, r0, #1
 8000a54:	89a3      	ldrh	r3, [r4, #12]
 8000a56:	bf15      	itete	ne
 8000a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8000a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a62:	81a3      	strheq	r3, [r4, #12]
 8000a64:	bf18      	it	ne
 8000a66:	81a3      	strhne	r3, [r4, #12]
 8000a68:	bd10      	pop	{r4, pc}

08000a6a <__sclose>:
 8000a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a6e:	f000 b8f7 	b.w	8000c60 <_close_r>

08000a72 <__swbuf_r>:
 8000a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a74:	460e      	mov	r6, r1
 8000a76:	4614      	mov	r4, r2
 8000a78:	4605      	mov	r5, r0
 8000a7a:	b118      	cbz	r0, 8000a84 <__swbuf_r+0x12>
 8000a7c:	6a03      	ldr	r3, [r0, #32]
 8000a7e:	b90b      	cbnz	r3, 8000a84 <__swbuf_r+0x12>
 8000a80:	f7ff fd96 	bl	80005b0 <__sinit>
 8000a84:	69a3      	ldr	r3, [r4, #24]
 8000a86:	60a3      	str	r3, [r4, #8]
 8000a88:	89a3      	ldrh	r3, [r4, #12]
 8000a8a:	071a      	lsls	r2, r3, #28
 8000a8c:	d525      	bpl.n	8000ada <__swbuf_r+0x68>
 8000a8e:	6923      	ldr	r3, [r4, #16]
 8000a90:	b31b      	cbz	r3, 8000ada <__swbuf_r+0x68>
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	6922      	ldr	r2, [r4, #16]
 8000a96:	1a98      	subs	r0, r3, r2
 8000a98:	6963      	ldr	r3, [r4, #20]
 8000a9a:	b2f6      	uxtb	r6, r6
 8000a9c:	4283      	cmp	r3, r0
 8000a9e:	4637      	mov	r7, r6
 8000aa0:	dc04      	bgt.n	8000aac <__swbuf_r+0x3a>
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f7ff ff6d 	bl	8000984 <_fflush_r>
 8000aaa:	b9e0      	cbnz	r0, 8000ae6 <__swbuf_r+0x74>
 8000aac:	68a3      	ldr	r3, [r4, #8]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	60a3      	str	r3, [r4, #8]
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	6022      	str	r2, [r4, #0]
 8000ab8:	701e      	strb	r6, [r3, #0]
 8000aba:	6962      	ldr	r2, [r4, #20]
 8000abc:	1c43      	adds	r3, r0, #1
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d004      	beq.n	8000acc <__swbuf_r+0x5a>
 8000ac2:	89a3      	ldrh	r3, [r4, #12]
 8000ac4:	07db      	lsls	r3, r3, #31
 8000ac6:	d506      	bpl.n	8000ad6 <__swbuf_r+0x64>
 8000ac8:	2e0a      	cmp	r6, #10
 8000aca:	d104      	bne.n	8000ad6 <__swbuf_r+0x64>
 8000acc:	4621      	mov	r1, r4
 8000ace:	4628      	mov	r0, r5
 8000ad0:	f7ff ff58 	bl	8000984 <_fflush_r>
 8000ad4:	b938      	cbnz	r0, 8000ae6 <__swbuf_r+0x74>
 8000ad6:	4638      	mov	r0, r7
 8000ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ada:	4621      	mov	r1, r4
 8000adc:	4628      	mov	r0, r5
 8000ade:	f000 f805 	bl	8000aec <__swsetup_r>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d0d5      	beq.n	8000a92 <__swbuf_r+0x20>
 8000ae6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000aea:	e7f4      	b.n	8000ad6 <__swbuf_r+0x64>

08000aec <__swsetup_r>:
 8000aec:	b538      	push	{r3, r4, r5, lr}
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <__swsetup_r+0xac>)
 8000af0:	4605      	mov	r5, r0
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	460c      	mov	r4, r1
 8000af6:	b118      	cbz	r0, 8000b00 <__swsetup_r+0x14>
 8000af8:	6a03      	ldr	r3, [r0, #32]
 8000afa:	b90b      	cbnz	r3, 8000b00 <__swsetup_r+0x14>
 8000afc:	f7ff fd58 	bl	80005b0 <__sinit>
 8000b00:	89a3      	ldrh	r3, [r4, #12]
 8000b02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b06:	0718      	lsls	r0, r3, #28
 8000b08:	d422      	bmi.n	8000b50 <__swsetup_r+0x64>
 8000b0a:	06d9      	lsls	r1, r3, #27
 8000b0c:	d407      	bmi.n	8000b1e <__swsetup_r+0x32>
 8000b0e:	2309      	movs	r3, #9
 8000b10:	602b      	str	r3, [r5, #0]
 8000b12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b16:	81a3      	strh	r3, [r4, #12]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b1c:	e034      	b.n	8000b88 <__swsetup_r+0x9c>
 8000b1e:	0758      	lsls	r0, r3, #29
 8000b20:	d512      	bpl.n	8000b48 <__swsetup_r+0x5c>
 8000b22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b24:	b141      	cbz	r1, 8000b38 <__swsetup_r+0x4c>
 8000b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	d002      	beq.n	8000b34 <__swsetup_r+0x48>
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f000 f90e 	bl	8000d50 <_free_r>
 8000b34:	2300      	movs	r3, #0
 8000b36:	6363      	str	r3, [r4, #52]	; 0x34
 8000b38:	89a3      	ldrh	r3, [r4, #12]
 8000b3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b3e:	81a3      	strh	r3, [r4, #12]
 8000b40:	2300      	movs	r3, #0
 8000b42:	6063      	str	r3, [r4, #4]
 8000b44:	6923      	ldr	r3, [r4, #16]
 8000b46:	6023      	str	r3, [r4, #0]
 8000b48:	89a3      	ldrh	r3, [r4, #12]
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	81a3      	strh	r3, [r4, #12]
 8000b50:	6923      	ldr	r3, [r4, #16]
 8000b52:	b94b      	cbnz	r3, 8000b68 <__swsetup_r+0x7c>
 8000b54:	89a3      	ldrh	r3, [r4, #12]
 8000b56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b5e:	d003      	beq.n	8000b68 <__swsetup_r+0x7c>
 8000b60:	4621      	mov	r1, r4
 8000b62:	4628      	mov	r0, r5
 8000b64:	f000 f840 	bl	8000be8 <__smakebuf_r>
 8000b68:	89a0      	ldrh	r0, [r4, #12]
 8000b6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b6e:	f010 0301 	ands.w	r3, r0, #1
 8000b72:	d00a      	beq.n	8000b8a <__swsetup_r+0x9e>
 8000b74:	2300      	movs	r3, #0
 8000b76:	60a3      	str	r3, [r4, #8]
 8000b78:	6963      	ldr	r3, [r4, #20]
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	61a3      	str	r3, [r4, #24]
 8000b7e:	6923      	ldr	r3, [r4, #16]
 8000b80:	b943      	cbnz	r3, 8000b94 <__swsetup_r+0xa8>
 8000b82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b86:	d1c4      	bne.n	8000b12 <__swsetup_r+0x26>
 8000b88:	bd38      	pop	{r3, r4, r5, pc}
 8000b8a:	0781      	lsls	r1, r0, #30
 8000b8c:	bf58      	it	pl
 8000b8e:	6963      	ldrpl	r3, [r4, #20]
 8000b90:	60a3      	str	r3, [r4, #8]
 8000b92:	e7f4      	b.n	8000b7e <__swsetup_r+0x92>
 8000b94:	2000      	movs	r0, #0
 8000b96:	e7f7      	b.n	8000b88 <__swsetup_r+0x9c>
 8000b98:	20000064 	.word	0x20000064

08000b9c <__swhatbuf_r>:
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	460c      	mov	r4, r1
 8000ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	4615      	mov	r5, r2
 8000baa:	461e      	mov	r6, r3
 8000bac:	da0d      	bge.n	8000bca <__swhatbuf_r+0x2e>
 8000bae:	89a3      	ldrh	r3, [r4, #12]
 8000bb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000bb4:	f04f 0100 	mov.w	r1, #0
 8000bb8:	bf0c      	ite	eq
 8000bba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000bbe:	2340      	movne	r3, #64	; 0x40
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	6031      	str	r1, [r6, #0]
 8000bc4:	602b      	str	r3, [r5, #0]
 8000bc6:	b016      	add	sp, #88	; 0x58
 8000bc8:	bd70      	pop	{r4, r5, r6, pc}
 8000bca:	466a      	mov	r2, sp
 8000bcc:	f000 f858 	bl	8000c80 <_fstat_r>
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	dbec      	blt.n	8000bae <__swhatbuf_r+0x12>
 8000bd4:	9901      	ldr	r1, [sp, #4]
 8000bd6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000bda:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000bde:	4259      	negs	r1, r3
 8000be0:	4159      	adcs	r1, r3
 8000be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be6:	e7eb      	b.n	8000bc0 <__swhatbuf_r+0x24>

08000be8 <__smakebuf_r>:
 8000be8:	898b      	ldrh	r3, [r1, #12]
 8000bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000bec:	079d      	lsls	r5, r3, #30
 8000bee:	4606      	mov	r6, r0
 8000bf0:	460c      	mov	r4, r1
 8000bf2:	d507      	bpl.n	8000c04 <__smakebuf_r+0x1c>
 8000bf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000bf8:	6023      	str	r3, [r4, #0]
 8000bfa:	6123      	str	r3, [r4, #16]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	6163      	str	r3, [r4, #20]
 8000c00:	b002      	add	sp, #8
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	ab01      	add	r3, sp, #4
 8000c06:	466a      	mov	r2, sp
 8000c08:	f7ff ffc8 	bl	8000b9c <__swhatbuf_r>
 8000c0c:	9900      	ldr	r1, [sp, #0]
 8000c0e:	4605      	mov	r5, r0
 8000c10:	4630      	mov	r0, r6
 8000c12:	f7ff fdb5 	bl	8000780 <_malloc_r>
 8000c16:	b948      	cbnz	r0, 8000c2c <__smakebuf_r+0x44>
 8000c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c1c:	059a      	lsls	r2, r3, #22
 8000c1e:	d4ef      	bmi.n	8000c00 <__smakebuf_r+0x18>
 8000c20:	f023 0303 	bic.w	r3, r3, #3
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	81a3      	strh	r3, [r4, #12]
 8000c2a:	e7e3      	b.n	8000bf4 <__smakebuf_r+0xc>
 8000c2c:	89a3      	ldrh	r3, [r4, #12]
 8000c2e:	6020      	str	r0, [r4, #0]
 8000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c34:	81a3      	strh	r3, [r4, #12]
 8000c36:	9b00      	ldr	r3, [sp, #0]
 8000c38:	6163      	str	r3, [r4, #20]
 8000c3a:	9b01      	ldr	r3, [sp, #4]
 8000c3c:	6120      	str	r0, [r4, #16]
 8000c3e:	b15b      	cbz	r3, 8000c58 <__smakebuf_r+0x70>
 8000c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c44:	4630      	mov	r0, r6
 8000c46:	f000 f82d 	bl	8000ca4 <_isatty_r>
 8000c4a:	b128      	cbz	r0, 8000c58 <__smakebuf_r+0x70>
 8000c4c:	89a3      	ldrh	r3, [r4, #12]
 8000c4e:	f023 0303 	bic.w	r3, r3, #3
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	81a3      	strh	r3, [r4, #12]
 8000c58:	89a3      	ldrh	r3, [r4, #12]
 8000c5a:	431d      	orrs	r5, r3
 8000c5c:	81a5      	strh	r5, [r4, #12]
 8000c5e:	e7cf      	b.n	8000c00 <__smakebuf_r+0x18>

08000c60 <_close_r>:
 8000c60:	b538      	push	{r3, r4, r5, lr}
 8000c62:	4d06      	ldr	r5, [pc, #24]	; (8000c7c <_close_r+0x1c>)
 8000c64:	2300      	movs	r3, #0
 8000c66:	4604      	mov	r4, r0
 8000c68:	4608      	mov	r0, r1
 8000c6a:	602b      	str	r3, [r5, #0]
 8000c6c:	f7ff fb83 	bl	8000376 <_close>
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	d102      	bne.n	8000c7a <_close_r+0x1a>
 8000c74:	682b      	ldr	r3, [r5, #0]
 8000c76:	b103      	cbz	r3, 8000c7a <_close_r+0x1a>
 8000c78:	6023      	str	r3, [r4, #0]
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	200001d0 	.word	0x200001d0

08000c80 <_fstat_r>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	4d07      	ldr	r5, [pc, #28]	; (8000ca0 <_fstat_r+0x20>)
 8000c84:	2300      	movs	r3, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	4608      	mov	r0, r1
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	602b      	str	r3, [r5, #0]
 8000c8e:	f7ff fb7d 	bl	800038c <_fstat>
 8000c92:	1c43      	adds	r3, r0, #1
 8000c94:	d102      	bne.n	8000c9c <_fstat_r+0x1c>
 8000c96:	682b      	ldr	r3, [r5, #0]
 8000c98:	b103      	cbz	r3, 8000c9c <_fstat_r+0x1c>
 8000c9a:	6023      	str	r3, [r4, #0]
 8000c9c:	bd38      	pop	{r3, r4, r5, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001d0 	.word	0x200001d0

08000ca4 <_isatty_r>:
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	4d06      	ldr	r5, [pc, #24]	; (8000cc0 <_isatty_r+0x1c>)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	4608      	mov	r0, r1
 8000cae:	602b      	str	r3, [r5, #0]
 8000cb0:	f7ff fb7b 	bl	80003aa <_isatty>
 8000cb4:	1c43      	adds	r3, r0, #1
 8000cb6:	d102      	bne.n	8000cbe <_isatty_r+0x1a>
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	b103      	cbz	r3, 8000cbe <_isatty_r+0x1a>
 8000cbc:	6023      	str	r3, [r4, #0]
 8000cbe:	bd38      	pop	{r3, r4, r5, pc}
 8000cc0:	200001d0 	.word	0x200001d0

08000cc4 <_lseek_r>:
 8000cc4:	b538      	push	{r3, r4, r5, lr}
 8000cc6:	4d07      	ldr	r5, [pc, #28]	; (8000ce4 <_lseek_r+0x20>)
 8000cc8:	4604      	mov	r4, r0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	4611      	mov	r1, r2
 8000cce:	2200      	movs	r2, #0
 8000cd0:	602a      	str	r2, [r5, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f7ff fb73 	bl	80003be <_lseek>
 8000cd8:	1c43      	adds	r3, r0, #1
 8000cda:	d102      	bne.n	8000ce2 <_lseek_r+0x1e>
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	b103      	cbz	r3, 8000ce2 <_lseek_r+0x1e>
 8000ce0:	6023      	str	r3, [r4, #0]
 8000ce2:	bd38      	pop	{r3, r4, r5, pc}
 8000ce4:	200001d0 	.word	0x200001d0

08000ce8 <_read_r>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4d07      	ldr	r5, [pc, #28]	; (8000d08 <_read_r+0x20>)
 8000cec:	4604      	mov	r4, r0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	602a      	str	r2, [r5, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	f7ff fb04 	bl	8000304 <_read>
 8000cfc:	1c43      	adds	r3, r0, #1
 8000cfe:	d102      	bne.n	8000d06 <_read_r+0x1e>
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	b103      	cbz	r3, 8000d06 <_read_r+0x1e>
 8000d04:	6023      	str	r3, [r4, #0]
 8000d06:	bd38      	pop	{r3, r4, r5, pc}
 8000d08:	200001d0 	.word	0x200001d0

08000d0c <_sbrk_r>:
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	4d06      	ldr	r5, [pc, #24]	; (8000d28 <_sbrk_r+0x1c>)
 8000d10:	2300      	movs	r3, #0
 8000d12:	4604      	mov	r4, r0
 8000d14:	4608      	mov	r0, r1
 8000d16:	602b      	str	r3, [r5, #0]
 8000d18:	f7ff fb5e 	bl	80003d8 <_sbrk>
 8000d1c:	1c43      	adds	r3, r0, #1
 8000d1e:	d102      	bne.n	8000d26 <_sbrk_r+0x1a>
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	b103      	cbz	r3, 8000d26 <_sbrk_r+0x1a>
 8000d24:	6023      	str	r3, [r4, #0]
 8000d26:	bd38      	pop	{r3, r4, r5, pc}
 8000d28:	200001d0 	.word	0x200001d0

08000d2c <_write_r>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	4d07      	ldr	r5, [pc, #28]	; (8000d4c <_write_r+0x20>)
 8000d30:	4604      	mov	r4, r0
 8000d32:	4608      	mov	r0, r1
 8000d34:	4611      	mov	r1, r2
 8000d36:	2200      	movs	r2, #0
 8000d38:	602a      	str	r2, [r5, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f7ff faff 	bl	800033e <_write>
 8000d40:	1c43      	adds	r3, r0, #1
 8000d42:	d102      	bne.n	8000d4a <_write_r+0x1e>
 8000d44:	682b      	ldr	r3, [r5, #0]
 8000d46:	b103      	cbz	r3, 8000d4a <_write_r+0x1e>
 8000d48:	6023      	str	r3, [r4, #0]
 8000d4a:	bd38      	pop	{r3, r4, r5, pc}
 8000d4c:	200001d0 	.word	0x200001d0

08000d50 <_free_r>:
 8000d50:	b538      	push	{r3, r4, r5, lr}
 8000d52:	4605      	mov	r5, r0
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d041      	beq.n	8000ddc <_free_r+0x8c>
 8000d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d5c:	1f0c      	subs	r4, r1, #4
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bfb8      	it	lt
 8000d62:	18e4      	addlt	r4, r4, r3
 8000d64:	f7ff fe36 	bl	80009d4 <__malloc_lock>
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <_free_r+0x90>)
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	b933      	cbnz	r3, 8000d7c <_free_r+0x2c>
 8000d6e:	6063      	str	r3, [r4, #4]
 8000d70:	6014      	str	r4, [r2, #0]
 8000d72:	4628      	mov	r0, r5
 8000d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d78:	f7ff be32 	b.w	80009e0 <__malloc_unlock>
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <_free_r+0x42>
 8000d80:	6820      	ldr	r0, [r4, #0]
 8000d82:	1821      	adds	r1, r4, r0
 8000d84:	428b      	cmp	r3, r1
 8000d86:	bf01      	itttt	eq
 8000d88:	6819      	ldreq	r1, [r3, #0]
 8000d8a:	685b      	ldreq	r3, [r3, #4]
 8000d8c:	1809      	addeq	r1, r1, r0
 8000d8e:	6021      	streq	r1, [r4, #0]
 8000d90:	e7ed      	b.n	8000d6e <_free_r+0x1e>
 8000d92:	461a      	mov	r2, r3
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	b10b      	cbz	r3, 8000d9c <_free_r+0x4c>
 8000d98:	42a3      	cmp	r3, r4
 8000d9a:	d9fa      	bls.n	8000d92 <_free_r+0x42>
 8000d9c:	6811      	ldr	r1, [r2, #0]
 8000d9e:	1850      	adds	r0, r2, r1
 8000da0:	42a0      	cmp	r0, r4
 8000da2:	d10b      	bne.n	8000dbc <_free_r+0x6c>
 8000da4:	6820      	ldr	r0, [r4, #0]
 8000da6:	4401      	add	r1, r0
 8000da8:	1850      	adds	r0, r2, r1
 8000daa:	4283      	cmp	r3, r0
 8000dac:	6011      	str	r1, [r2, #0]
 8000dae:	d1e0      	bne.n	8000d72 <_free_r+0x22>
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	6053      	str	r3, [r2, #4]
 8000db6:	4408      	add	r0, r1
 8000db8:	6010      	str	r0, [r2, #0]
 8000dba:	e7da      	b.n	8000d72 <_free_r+0x22>
 8000dbc:	d902      	bls.n	8000dc4 <_free_r+0x74>
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	602b      	str	r3, [r5, #0]
 8000dc2:	e7d6      	b.n	8000d72 <_free_r+0x22>
 8000dc4:	6820      	ldr	r0, [r4, #0]
 8000dc6:	1821      	adds	r1, r4, r0
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	bf04      	itt	eq
 8000dcc:	6819      	ldreq	r1, [r3, #0]
 8000dce:	685b      	ldreq	r3, [r3, #4]
 8000dd0:	6063      	str	r3, [r4, #4]
 8000dd2:	bf04      	itt	eq
 8000dd4:	1809      	addeq	r1, r1, r0
 8000dd6:	6021      	streq	r1, [r4, #0]
 8000dd8:	6054      	str	r4, [r2, #4]
 8000dda:	e7ca      	b.n	8000d72 <_free_r+0x22>
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop
 8000de0:	200001c8 	.word	0x200001c8

08000de4 <_init>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr

08000df0 <_fini>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr
